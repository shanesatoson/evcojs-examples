import {
  CloudEvent,
  registerCommandHandler,
  registerStateRebuilder,
} from "evcojs";
import {
  BookBorrowedEvent,
  BookCatalogedEvent,
  BookCopyRegisteredEvent,
  BookReturnEvent,
  BorrowBookCommand,
  INVENTORY_CONTEXT,
  RegisterCopyCommand,
  ReturnBookCommand,
  State,
} from "./book-inventory.model";

/**
 * Registers a copy of a book.
 * @param command the command with the isbn of the book
 * @param state the current state of the domain
 * @returns the events which are generated by the command
 */
function registerCopy(
  command: RegisterCopyCommand,
  state?: State
): CloudEvent<BookCopyRegisteredEvent>[] {
  checkIfBookIsAlreadyCatalogedByOtherDomain(state, command.isbn);

  return [
    {
      type: "event.book.copy.registered",
      subject: "/book/" + command.isbn,
      data: {
        isbn: command.isbn,
      },
    },
  ];
}

/**
 * Borrow a copy of a book
 * @param command the command with the isbn of the book
 * @param state the current state of the domain
 * @returns the events which are generated by the command
 * @throws if there is no copy available anymore
 */
function borrowBook(
  command: BorrowBookCommand,
  state?: State
): CloudEvent<BookBorrowedEvent>[] {
  checkIfBookIsAlreadyCatalogedByOtherDomain(state, command.isbn);
  if (state!.amount <= 0) {
    throw new Error("No copy available anymore");
  }
  return [
    {
      type: "event.book.copy.borrowed",
      subject: "/book/" + command.isbn,
      data: {
        isbn: command.isbn,
      },
    },
  ];
}

/**
 * Return a copy of a book.
 * @param command the command with the isbn of the book
 * @param state the current state of the domain
 * @returns the events which are generated by the command
 */
function returnBook(
  command: ReturnBookCommand,
  state?: State
): CloudEvent<BookReturnEvent>[] {
  checkIfBookIsAlreadyCatalogedByOtherDomain(state, command.isbn);
  if (state!.amount >= state!.maxCopies) {
    throw new Error("We cannot return more copies than registered");
  }
  return [
    {
      type: "event.book.copy.returned",
      subject: "/book/" + command.isbn,
      data: {
        isbn: command.isbn,
      },
    },
  ];
}

/**
 * Handles the event.book.cataloged event.
 * The event is generated by the book catalog domain when a book is cataloged.
 * @param event the event which should be handled
 * @param state the previous calculated state | can be null
 * @returns the new state
 */
function onBookCataloged(event: BookCatalogedEvent, state?: State): State {
  const newState = {
    isbn: event.isbn,
    amount: 0,
    maxCopies: 0,
  };
  return newState;
}

/**
 * Handles the event.book.copy.registered event.
 * The event is generated by the book inventory domain when a book copy is registered.
 * @param event the event which should be handled
 * @param state the previous calculated state | can be null
 * @returns the new state
 */
function onBookRegistered(
  event: BookCopyRegisteredEvent,
  state?: State
): State {
  const newState = {
    ...state!,
    amount: state!.amount + 1,
    maxCopies: state!.maxCopies + 1,
  };
  return newState;
}

/**
 * Handles the event.book.copy.borrowed event.
 * The event is generated by the book inventory domain when a book copy is borrowed.
 * @param event the event which should be handled
 * @param state the previous calculated state | can be null
 * @returns the new state
 */
function onBookBorrowed(event: BookBorrowedEvent, state?: State): State {
  const newState = {
    ...state!,
    amount: state!.amount - 1,
  };
  return newState;
}

/**
 * Handles the event.book.copy.returned event.
 * The event is generated by the book inventory domain when a book copy is returned.
 * @param event the event which should be handled
 * @param state the previous calculated state | can be null
 * @returns the new state
 */

function onBookReturned(event: BookReturnEvent, state?: State): State {
  const newState = {
    ...state!,
    amount: state!.amount + 1,
  };
  return newState;
}

/**
 * Registers all commands and state rebuilder functions of the book-inventory domain.
 * This function can be called multiple times and only executes once.
 */
export function registerInventoryCommandAndStateRebuilder() {
  registerStateRebuilder(
    "event.book.cataloged",
    INVENTORY_CONTEXT,
    onBookCataloged
  );

  //---
  registerCommandHandler(
    "command.book-inventory.register.copy", //must be app wide unique
    INVENTORY_CONTEXT, //defines the context to execute event-, stateloading- and staterebuilder handler
    registerCopy
  );
  registerStateRebuilder(
    "event.book.copy.registered",
    INVENTORY_CONTEXT,
    onBookRegistered
  );

  //---
  registerCommandHandler(
    "command.book-inventory.borrow.copy", //must be app wide unique
    INVENTORY_CONTEXT, //defines the context to execute event-, stateloading- and staterebuilder handler
    borrowBook
  );
  registerStateRebuilder(
    "event.book.copy.borrowed",
    INVENTORY_CONTEXT,
    onBookBorrowed
  );

  //---
  registerCommandHandler(
    "command.book-inventory.return.copy", //must be app wide unique
    INVENTORY_CONTEXT, //defines the context to execute event-, stateloading- and staterebuilder handler
    returnBook
  );
  registerStateRebuilder(
    "event.book.copy.returned",
    INVENTORY_CONTEXT,
    onBookReturned
  );
}

/**
 * Checks if a book is already cataloged by another domain.
 * If the book is not cataloged or the ISBN does not match, it throws an error.
 * @param state The current state of the book-inventory domain.
 * @param isbn The ISBN of the book to check.
 */
function checkIfBookIsAlreadyCatalogedByOtherDomain(
  state: State | undefined,
  isbn: string
) {
  if (!state?.isbn) {
    throw new Error("Book is not cataloged");
  }

  if (state.isbn !== isbn) {
    throw new Error("Book is not the same");
  }
}
